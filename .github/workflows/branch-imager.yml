name: Branch Imager

on:
  push:
    branches-ignore:
      - main

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
      - name: Add problem matchers
        run: |
          echo "::add-matcher::.github/problemMatchers/tsc.json"
          echo "::add-matcher::.github/problemMatchers/eslint-stylish.json"
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )

  Build:
    name: Compiling TypeScript
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: Restore CI Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-14-${{ hashFiles('**/yarn.lock') }}
      - name: Install NodeJS Dependencies
        run: yarn
      - name: Build Code
        run: yarn build
      - name: Upload API bundle to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: api_bundle
          path: generated/api/
          if-no-files-found: error
      - name: Get GitHub Branch Name
        id: get_branch_name
        run: echo ::set-output name=branch_name::$(echo $( [ -z "${{ github.head_ref }}" ] && echo ${{ github.ref }} | cut -c12- || echo ${{ github.head_ref }} ) | sed -e 's/\/\|_/-/g' | sed -e 's/@//g')
    outputs:
      branch_name: ${{ steps.get_branch_name.outputs.branch_name }}

  Dockerhub:
    name: Publish image to Dockerhub
    runs-on: ubuntu-latest
    if: "!(contains(needs.pre_ci.outputs.commit_message, '[skip ci]') ||contains(needs.pre_ci.outputs.commit_message, '[skip docker]'))"
    needs: [pre_ci, Build]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Download build bundle artifact
        uses: actions/download-artifact@v2
        with:
          name: api_bundle
          path: generated/api/
      - name: Publish to Dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: favware/graphql-pokemon
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: '${{ needs.build.outputs.branch_name }}'

  Github-Package-Registry-Docker:
    name: Publish image to Github Package Registry
    runs-on: ubuntu-latest
    if: "!(contains(needs.pre_ci.outputs.commit_message, '[skip ci]') ||contains(needs.pre_ci.outputs.commit_message, '[skip docker]'))"
    needs: [pre_ci, Build]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Download build bundle artifact
        uses: actions/download-artifact@v2
        with:
          name: api_bundle
          path: generated/api/
      - name: Publish to Github Package Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: favware/graphql-pokemon/graphql-pokemon
          username: Favware-bot
          password: ${{ secrets.BOT_TOKEN }}
          tags: '${{ needs.build.outputs.branch_name }}'
          registry: docker.pkg.github.com
