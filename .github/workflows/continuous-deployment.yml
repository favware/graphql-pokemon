name: Continuous Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/continuous-deployment.yml'
      - 'README.md'
      - 'Dockerfile'

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
      - name: Add problem matchers
        run: |
          echo "::add-matcher::.github/problemMatchers/tsc.json"
          echo "::add-matcher::.github/problemMatchers/eslint-stylish.json"
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )

  Linting:
    name: Linting
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install NodeJS Dependencies
        run: yarn --frozen-lockfile
      - name: Run ESLint
        run: yarn lint --fix=false

  CodeQL:
    name: Codequality
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  Testing:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v14
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install NodeJS Dependencies
        run: yarn --frozen-lockfile
      - name: Run Jest
        run: yarn test

  Build:
    name: Compiling TypeScript
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: [pre_ci, Testing, Linting, CodeQL]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install NodeJS Dependencies
        run: yarn --frozen-lockfile
      - name: Build Code
        run: yarn build
      - name: Upload API bundle to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: api_bundle
          path: generated/api/
          if-no-files-found: error

  Publish:
    name: Publish image to container registries
    runs-on: ubuntu-latest
    if: >-
      !(contains(needs.pre_ci.outputs.commit_message, '[skip ci]')
      ||contains(needs.pre_ci.outputs.commit_message, '[skip docker]'))
    needs: [pre_ci, Build]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Download build bundle artifact
        uses: actions/download-artifact@v2
        with:
          name: api_bundle
          path: generated/api/
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1.2.0
      - name: Login to DockerHub
        uses: docker/login-action@v1.8.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v2.4.0
        with:
          push: true
          context: .
          tags: |
            favware/graphql-pokemon:latest
            ghcr.io/favware/graphql-pokemon:latest
      - name: Update repo description
        uses: peter-evans/dockerhub-description@v2.4.2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: favware/graphql-pokemon
          short-description: Extensive Pokemon GraphQL API

  GenerateTypings:
    name: Generate TypeScript, and SDL type information
    runs-on: ubuntu-latest
    if: >-
      !(contains(needs.pre_ci.outputs.commit_message, '[skip ci]')
      ||contains(needs.pre_ci.outputs.commit_message, '[skip publish]'))
    needs: [pre_ci, Publish]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install NodeJS Dependencies
        run: yarn
      - name: Generate GraphQL Schema code
        run: |
          docker container run --name pokedex -d --expose 4000 -p 4000:8080 -it favware/graphql-pokemon:latest \
          && sleep 5 \
          && yarn codegen
      - name: Upload typescript bundle to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: typescript_bundle
          path: generated/ts/
          if-no-files-found: error

  GithubPublish:
    name: Publishing release to Github
    runs-on: ubuntu-latest
    if: >-
      !(contains(needs.pre_ci.outputs.commit_message, '[skip ci]')
      ||contains(needs.pre_ci.outputs.commit_message, '[skip publish]'))
    needs: [pre_ci, GenerateTypings]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js 15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install NodeJS Dependencies
        run: yarn --frozen-lockfile
      - name: Configure Git
        run: |
          git remote set-url origin "https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git";
          git config --local user.email "${GITHUB_EMAIL}";
          git config --local user.name "${GITHUB_USER}";
        env:
          GITHUB_ACTOR: Favware-bot
          GITHUB_EMAIL: favwarebot@gmail.com
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      - name: Bump semver
        if: "!contains(needs.pre_ci.outputs.commit_message, '[skip bump]')"
        run: yarn sversion
      - name: Store bumped package.json
        uses: actions/upload-artifact@v2
        with:
          name: package_bundle
          path: package.json
          if-no-files-found: error
      - name: Store bumped changelog.md
        uses: actions/upload-artifact@v2
        with:
          name: changelog_bundle
          path: CHANGELOG.md
          if-no-files-found: error
      - name: Push changes
        if: "!contains(needs.pre_ci.outputs.commit_message, '[skip bump]')"
        run: git push --follow-tags origin main

  NPMPublish:
    name: Publishing release to NPM
    runs-on: ubuntu-latest
    if: >-
      !(contains(needs.pre_ci.outputs.commit_message, '[skip ci]')
      ||contains(needs.pre_ci.outputs.commit_message, '[skip publish]'))
    needs: [pre_ci, GithubPublish]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Setup Node for publishing to NPM
        uses: actions/setup-node@v2
        with:
          node-version: 15
          registry-url: https://registry.npmjs.org/
      - name: Download generated typings artifact
        uses: actions/download-artifact@v2
        with:
          name: typescript_bundle
          path: generated/ts/
      - name: Download stored package.json
        uses: actions/download-artifact@v2
        with:
          name: package_bundle
      - name: Download stored changelog.md
        uses: actions/download-artifact@v2
        with:
          name: changelog_bundle
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn install --frozen-lockfile --ignore-scripts
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  Github-Package-Registry-Node:
    name: Publishing release to Github Package Registry
    runs-on: ubuntu-latest
    if: >-
      !(contains(needs.pre_ci.outputs.commit_message, '[skip ci]')
      ||contains(needs.pre_ci.outputs.commit_message, '[skip publish]'))
    needs: [pre_ci, GithubPublish]
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Setup Node for publishing to Github
        uses: actions/setup-node@v2
        with:
          node-version: 15
          registry-url: 'https://npm.pkg.github.com'
          scope: '@favware'
      - name: Download generated typings artifact
        uses: actions/download-artifact@v2
        with:
          name: typescript_bundle
          path: generated/ts/
      - name: Download stored package.json
        uses: actions/download-artifact@v2
        with:
          name: package_bundle
      - name: Download stored changelog.md
        uses: actions/download-artifact@v2
        with:
          name: changelog_bundle
      - name: Restore CI Cache
        uses: actions/cache@v2.1.5
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn install --frozen-lockfile --ignore-scripts
      - name: Publish to Github
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.BOT_TOKEN }}
