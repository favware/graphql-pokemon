// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getTypeByName GIVEN a valid type THEN returns JSONObject 1`] = `
Object {
  "getTypeByName": Object {
    "damageDealt": Object {
      "bug": 1,
      "dark": 0,
      "dragon": 2,
      "electric": 0,
      "fairy": 0,
      "fighting": 0,
      "fire": 2,
      "flying": 0,
      "ghost": 0,
      "grass": 1,
      "ground": 0,
      "ice": 1,
      "normal": 0,
      "poison": 0,
      "psychic": 0,
      "rock": 2,
      "steel": 1,
      "water": 2,
    },
    "damageTaken": Object {
      "bug": 2,
      "dark": 0,
      "dragon": 0,
      "electric": 0,
      "fairy": 2,
      "fighting": 0,
      "fire": 2,
      "flying": 0,
      "ghost": 0,
      "grass": 2,
      "ground": 1,
      "ice": 2,
      "normal": 0,
      "poison": 0,
      "psychic": 0,
      "rock": 1,
      "steel": 2,
      "water": 1,
    },
  },
}
`;

exports[`getTypeByName GIVEN an invalid type THEN returns error 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$type" got invalid value "totally_invalid_type"; Value "totally_invalid_type" does not exist in "Types" enum.],
  ],
}
`;

exports[`getTypeMatchup GIVEN a one valid type THEN returns TypeMatchups 1`] = `
Object {
  "getTypeMatchup": Object {
    "attacking": Object {
      "doubleEffectiveTypes": Array [],
      "doubleResistedTypes": Array [],
      "effectiveTypes": Array [
        "dragon",
      ],
      "effectlessTypes": Array [
        "fairy",
      ],
      "normalTypes": Array [
        "bug",
        "dark",
        "electric",
        "fighting",
        "fire",
        "flying",
        "ghost",
        "grass",
        "ground",
        "ice",
        "normal",
        "poison",
        "psychic",
        "rock",
        "water",
      ],
      "resistedTypes": Array [
        "steel",
      ],
    },
    "defending": Object {
      "doubleEffectiveTypes": Array [],
      "doubleResistedTypes": Array [],
      "effectiveTypes": Array [
        "dragon",
        "fairy",
        "ice",
      ],
      "effectlessTypes": Array [],
      "normalTypes": Array [
        "bug",
        "dark",
        "fighting",
        "flying",
        "ghost",
        "ground",
        "normal",
        "poison",
        "psychic",
        "rock",
        "steel",
      ],
      "resistedTypes": Array [
        "electric",
        "fire",
        "grass",
        "water",
      ],
    },
  },
}
`;

exports[`getTypeMatchup GIVEN a one valid type as array THEN returns TypeMatchups 1`] = `
Object {
  "getTypeMatchup": Object {
    "attacking": Object {
      "doubleEffectiveTypes": Array [],
      "doubleResistedTypes": Array [],
      "effectiveTypes": Array [
        "dragon",
      ],
      "effectlessTypes": Array [
        "fairy",
      ],
      "normalTypes": Array [
        "bug",
        "dark",
        "electric",
        "fighting",
        "fire",
        "flying",
        "ghost",
        "grass",
        "ground",
        "ice",
        "normal",
        "poison",
        "psychic",
        "rock",
        "water",
      ],
      "resistedTypes": Array [
        "steel",
      ],
    },
    "defending": Object {
      "doubleEffectiveTypes": Array [],
      "doubleResistedTypes": Array [],
      "effectiveTypes": Array [
        "dragon",
        "fairy",
        "ice",
      ],
      "effectlessTypes": Array [],
      "normalTypes": Array [
        "bug",
        "dark",
        "fighting",
        "flying",
        "ghost",
        "ground",
        "normal",
        "poison",
        "psychic",
        "rock",
        "steel",
      ],
      "resistedTypes": Array [
        "electric",
        "fire",
        "grass",
        "water",
      ],
    },
  },
}
`;

exports[`getTypeMatchup GIVEN a two valid types THEN returns TypeMatchups 1`] = `
Object {
  "getTypeMatchup": Object {
    "attacking": Object {
      "doubleEffectiveTypes": Array [
        "ghost",
        "psychic",
      ],
      "doubleResistedTypes": Array [
        "dark",
      ],
      "effectiveTypes": Array [],
      "effectlessTypes": Array [
        "normal",
      ],
      "normalTypes": Array [
        "bug",
        "dragon",
        "electric",
        "fire",
        "flying",
        "grass",
        "ground",
        "ice",
        "poison",
        "rock",
        "steel",
        "water",
      ],
      "resistedTypes": Array [
        "fairy",
        "fighting",
      ],
    },
    "defending": Object {
      "doubleEffectiveTypes": Array [],
      "doubleResistedTypes": Array [],
      "effectiveTypes": Array [
        "fairy",
      ],
      "effectlessTypes": Array [
        "fighting",
        "normal",
        "psychic",
      ],
      "normalTypes": Array [
        "bug",
        "dark",
        "dragon",
        "electric",
        "fire",
        "flying",
        "ghost",
        "grass",
        "ground",
        "ice",
        "rock",
        "steel",
        "water",
      ],
      "resistedTypes": Array [
        "poison",
      ],
    },
  },
}
`;

exports[`getTypeMatchup GIVEN an invalid type matchup THEN returns error 1`] = `
Object {
  "errors": Array [
    [GraphQLError: Variable "$types" got invalid value "totally_invalid_type"; Value "totally_invalid_type" does not exist in "Types" enum.],
  ],
}
`;
