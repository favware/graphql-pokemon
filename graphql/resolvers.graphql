type Query {
  "Gets the details on a Pokémon ability, using the ability name"
  getAbility("The ability to look up" ability: AbilitiesEnum!): Ability!

  """
  Gets details on a Pokémon ability, using a fuzzy search on name

  This can be used to find multiple results based on the query

  You can provide `take` to limit the amount of abilities to return (default: 1), set the offset of where to start with `offset`, and reverse the entire array with `reverse`.
  """
  getFuzzyAbility(
    "Sets the offset where to start"
    offset: Int = 0

    "Return only this many results, starting from the offset"
    take: Int = 1

    "Reverses the dataset before paginating"
    reverse: Boolean = false

    "The ability to fuzzily search"
    ability: String!
  ): [Ability!]!

  """
  Gets details on a single Pokémon based on National Pokédex number

  You can provide `takeFlavorTexts` to limit the amount of flavour texts to return, set the offset of where to start with `offsetFlavorTexts`, and reverse the entire array with `reverseFlavorTexts`.

  **Reversal is applied before pagination!**
  """
  getPokemonByDexNumber(
    "Sets the offset for flavor texts from where to start."
    offsetFlavorTexts: Int = 0

    "Return this many flavour texts, up to the maximum of entries that the requested Pokémon has."
    takeFlavorTexts: Int = 1

    "Whether to reverse the list of games from which to get the data. By default Generation 1 is considered for `take` first, when setting this to true that is instead Generation 8."
    reverseFlavorTexts: Boolean = true

    "The International PokéDex number of the Pokémon to look up"
    number: Int!
  ): Pokemon!

  """
  Gets details on a single Pokémon based on species name

  You can provide `takeFlavorTexts` to limit the amount of flavour texts to return, set the offset of where to start with `offsetFlavorTexts`, and reverse the entire array with `reverseFlavorTexts`.

  **Reversal is applied before pagination!**
  """
  getPokemon(
    "Sets the offset for flavor texts from where to start."
    offsetFlavorTexts: Int = 0

    "Return this many flavour texts, up to the maximum of entries that the requested Pokémon has."
    takeFlavorTexts: Int = 1

    "Whether to reverse the list of games from which to get the data. By default Generation 1 is considered for `take` first, when setting this to true that is instead Generation 8."
    reverseFlavorTexts: Boolean = true

    "The Pokémon to look up"
    pokemon: PokemonEnum!
  ): Pokemon!

  """
  Gets details on one or more Pokémon based on species name

  You can provide `take` to limit the amount of Pokémon to return (default: 1), set the offset of where to start with `offset`, and reverse the entire array with `reverse`.

  You can provide `takeFlavorTexts` to limit the amount of flavour texts to return, set the offset of where to start with `offsetFlavorTexts`, and reverse the entire array with `reverseFlavorTexts`.

  **Reversal is applied before pagination!**
  """
  getFuzzyPokemon(
    "Sets the offset where to start"
    offset: Int = 0

    "Return only this many results, starting from the offset"
    take: Int = 1

    "Reverses the dataset before paginating"
    reverse: Boolean = false

    "The Pokémon to fuzzily search"
    pokemon: String!

    "Sets the offset for flavor texts from where to start."
    offsetFlavorTexts: Int = 0

    "Return this many flavour texts, up to the maximum of entries that the requested Pokémon has."
    takeFlavorTexts: Int = 1

    "Whether to reverse the list of games from which to get the data. By default Generation 1 is considered for `take` first, when setting this to true that is instead Generation 8."
    reverseFlavorTexts: Boolean = true
  ): [Pokemon!]!

  """
  Returns a list of all the known Pokémon.

  For every Pokémon all the data on each requested field is returned.

  **_NOTE:_ To skip all CAP Pokémon, PokéStar Pokémon, and Missingno provide an `offset` of 87**

  You can provide `take` to limit the amount of Pokémon to return (default: 1), set the offset of where to start with `offset`, and reverse the entire array with `reverse`.

  You can provide `takeFlavorTexts` to limit the amount of flavour texts to return, set the offset of where to start with `offsetFlavorTexts`, and reverse the entire array with `reverseFlavorTexts`.

  While the API will currently not rate limit the usage of this query, it may do so in the future.

  It is advisable to cache responses of this query.
  """
  getAllPokemon(
    "Sets the offset where to start"
    offset: Int = 0

    "Return only this many results, starting from the offset"
    take: Int = 1273

    "Reverses the dataset before paginating"
    reverse: Boolean = false

    "Sets the offset for flavor texts from where to start."
    offsetFlavorTexts: Int = 0

    "Return this many flavour texts, up to the maximum of entries that the requested Pokémon has."
    takeFlavorTexts: Int = 1

    "Whether to reverse the list of games from which to get the data. By default Generation 1 is considered for `take` first, when setting this to true that is instead Generation 8."
    reverseFlavorTexts: Boolean = true
  ): [Pokemon!]!

  "Gets the details on a Pokémon item, using the item name"
  getItem("The item to look up" item: ItemsEnum!): Item!

  """
  Gets details on a Pokémon item, using a fuzzy search on name

  This can be used to find multiple results based on the query

  By default only 1 result is returned. You can provide the arguments `take`, `offset`, and `reverse` to modify this behaviour.
  """
  getFuzzyItem(
    "Sets the offset where to start"
    offset: Int = 0

    "Return only this many results, starting from the offset"
    take: Int = 1

    "Reverses the dataset before paginating"
    reverse: Boolean = false

    "The item to fuzzily search"
    item: String!
  ): [Item!]!

  """
  Gets the learnsets for a given Pokémon and move.

  Multiple moves are possible by putting them in an array: `[move1, move2]`.

  You can also apply a generation filter (only results for the given generation will be returned) with the generation argument
  """
  getLearnset(
    "The generation filter to apply"
    generation: Int

    "The moves to match against the Pokémon"
    moves: [MovesEnum!]!

    "The Pokémon for which to get the learnset"
    pokemon: PokemonEnum!
  ): Learnset!

  """
  Gets the learnset for a given Pokémon and move.

  A fuzzy search is performed to find a matching Pokémon and move

  Multiple moves are possible by putting them in an array: `[move1, move2]`.

  You can also apply a generation filter (only results for the given generation will be returned) with the generation argument
  """
  getFuzzyLearnset(
    "The generation filter to apply"
    generation: Int

    "The moves to match against the Pokémon"
    moves: [String!]!

    "The Pokémon for which to get the learnset"
    pokemon: String!
  ): Learnset!

  "Gets the details on a Pokémon move, using the move name"
  getMove("The move to look up" move: MovesEnum!): Move!

  """
  Gets details on a Pokémon move, using a fuzzy search on name

  This can be used to find multiple results based on the query

  By default only 1 result is returned. You can provide the arguments `take`, "offset", and "reverse" to modify this behaviour.
  """
  getFuzzyMove(
    "Sets the offset where to start"
    offset: Int = 0

    "Return only this many results, starting from the offset"
    take: Int = 1

    "Reverses the dataset before paginating"
    reverse: Boolean = false

    "The move to fuzzily search"
    move: String!
  ): [Move!]!

  "Gets the type matchup data for the given type or types"
  getTypeMatchup("The primary type to check" primaryType: TypesEnum!, "The secondary type to check" secondaryType: TypesEnum): TypeMatchup!
}
